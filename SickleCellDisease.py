#The below program will simulate the effects of the Single #Nucleotide Polymorphism that leads to Sickle Cell DiseaseDNA = ('ATTGTTGTCTTC') #defines the variable DNA and assigns it a stringdef translate(DNA): #defines a translate function that receives a dna sequence string as a parameter    dict = {'ATT': 'I',            'ATC': 'I',            'ATA': 'I',            'CTT': 'L',            'CTC': 'L',            'CTA': 'L',            'CTG': 'L',            'TTA': 'L',            'TTG': 'L',            'GTT': 'V',            'GTC': 'V',            'GTA': 'V',            'GTG': 'V',            'TTT': 'F',            'TTC': 'F',            'ATG': 'M',            }  #creates a dictionary which stores the slc codes as keys with matching amino acid values for the first five amino acids. If a key has multiple matching amino acid values, these are stored as a list.    i = 0 #creates a counter and sets the starting value at 0    translate = "" #The translate varible is initialised to an empty string in order to store the translated sequence    for i in range(0, len(DNA), 3): #creates a for loop for the value of i that runs from 0 to the length of the DNA sequence, incrementing by 3 characters every time        amino = DNA[i:i+3]    #stores the first amino acid in the variable 'amino' by storing the string that runs from index value 0 to 2. i will be increased by 3 on every loop, thus moving along the string by 3 every time        if amino in dict:  #creates an if statement for the amino variable if it occurs in the dictionary            output = dict[amino] #finds the amino in the dictionary and stores the corresponding key in the 'output' variable            translate += output #the value in the output variable is stored in the store variable, and each successive output variable is added to it        else:            translate += 'X' #the value in the output variable is stored in the store variable, and each successive output variable is added to it    return (translate) #prints the output as a stringdef mutate(DNA):  #defines a mutate function        DNA = open ('DNA.txt','r').read() #opens the 'DNA.txt' in read mode, and reads and saves its contents to a DNA variable    DNA = DNA.replace("\n","") #replaces all the new line characters in the DNA variable with no space    normalDNA = open ('normalDNA.txt','w') # opens 'normalDNA.txt' in write mode    normalDNA.write(DNA.replace('a','A'))  #Writes the DNA variable to normalDNA, replacing the 'a' with 'A'    normalDNA.close()  #closes the normalDNA file    mutatedDNA = open ('mutatedDNA.txt','w') # opens 'mutatedDNA.txt' in write mode    mutatedDNA.write(DNA.replace('a','T'))  #Writes the DNA variable to mutatedDNA, replacing the 'a' with 'T'    mutatedDNA.close()  #closes the mutatedDNA file    def txtTranslate(DNA): #defines a txtTranslate function        normalDNA = open ('normalDNA.txt','r').read() # opens 'normalDNA.txt' in read mode and reads all contents of the input file and store it as a string variable.    print (translate(normalDNA)) ## passes normalDNA to the translate function, and prints out the returned translated DNA string    mutatedDNA = open ('mutatedDNA.txt','r').read() # opens 'mutatedDNA.txt' in read mode and reads all contents of the input file and stores it as a string variable.    print (translate(mutatedDNA)) ## passes mutatedDNA to the translate function, and prints out the returned translated DNA stringprint (mutate(DNA)) #calls the mutate() functionprint (txtTranslate(DNA)) #calls the txtTranslate() function                    